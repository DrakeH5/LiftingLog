/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

function throwError(exitCode, message, helpText) {
  const error = new Error(
    helpText ?  `${message}\n\n---\n\n${helpText}` : message
  );
  error.exitCode = exitCode;
  throw error;
}

function formatOption(option) {
  let text = '  ';
  text += option.abbr ? `-${option.abbr}, ` : '    ';
  text += `--${option.flag ? '(no-)' : ''}${option.full}`;
  if (option.choices) {
    text += `=${option.choices.join('|')}`;
  } else if (option.metavar) {
    text += `=${option.metavar}`;
  }
  if (option.list) {
    text += ' ...';
  }
  if (option.defaultHelp || option.default !== undefined || option.help) {
    text += '  ';
    if (text.length < 32) {
      text += ' '.repeat(32 - text.length);
    }
    const textLength = text.length;
    if (option.help) {
      text += option.help;
    }
    if (option.defaultHelp || option.default !== undefined) {
      if (option.help) {
        text += '\n';
      }
      text += `${' '.repeat(textLength)}(default: ${option.defaultHelp || option.default})`;
    }
  }

  return text;
}

function getHelpText(options) {
  const opts = Object.keys(options)
    .map(k => options[k])
    .sort((a,b) => a.full.localeCompare(b.full));

  const text = `
Usage: jscodeshift [OPTION]... PATH...
  or:  jscodeshift [OPTION]... -t TRANSFORM_PATH PATH...
  or:  jscodeshift [OPTION]... -t URL PATH...
  or:  jscodeshift [OPTION]... --stdin < file_list.txt

Apply transform logic in TRANSFORM_PATH (recursively) to every PATH.
If --stdin is set, each line of the standard input is used as a path.

Options:
"..." behind an option means that it can be supplied multiple times.
All options are also passed to the transformer, which means you can supply custom options that are not listed here.

${opts.map(formatOption).join('\n')}
`;
  return text.trimLeft();
}

function validateOptions(parsedOptions, options) {
  co